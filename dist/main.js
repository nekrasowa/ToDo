/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./start/index.js":
/*!************************!*\
  !*** ./start/index.js ***!
  \************************/
/***/ (() => {

eval("\nfunction onPageLoaded () {\n  // console.log(Object.entries(localStorage))\n  const notesData = [\n    {\n      heading: 'Название первой заметки',\n      text: 'Текст первой заметки',\n      ready: false\n    },\n    {\n      heading: 'Название второй заметки',\n      text: 'Текст второй заметки',\n      ready: false\n    },\n    {\n      heading: 'Название третей заметки',\n      text: 'Текст третей заметки',\n      ready: false\n    }\n  ]\n\n  const newNote = document.querySelector('.newNoteArea');\n  const headingNote = document.querySelector('.headingInput');\n  const notes = document.querySelector('.notes');\n  let noteId = 0;\n  let editedNoteId;\n  let editedNoteId2;\n  let deletedKey;\n  let inf; \n  let infJSON;\n  let readyKey;\n \n\n  function clear () {\n    document.querySelector('.headingInput').value = '';\n    document.querySelector('.newNoteArea').value = '';\n  }\n\n  function createBtn(div, mainElem, name, blacklight, cb) {\n    const elem = document.createElement('div');\n    elem.classList.add(name);\n    elem.classList.add(blacklight);\n\n    const srcSVG = `img/${name}.svg`;\n    const iconElem = new Image;\n    iconElem.src = srcSVG;\n    iconElem.classList.add('icon', `${name}-img`);\n    iconElem.setAttribute('alt', `${name}Icon`);\n\n    mainElem.appendChild(elem);\n    elem.appendChild(iconElem);\n\n    elem.onclick = () => {\n      cb(div);\n    };\n  }\n\n  function createId() {\n    return `note-${noteId++}`; \n  }\n\n  function createNote(obj = {}) {\n    const {\n      heading = headingNote.value,\n      text = newNote.value,\n      ready = false\n    } = obj\n\n    const note = document.createElement('div');\n    note.classList.add('note');\n    note.setAttribute('id', createId());\n\n    const noteBlock = document.createElement('div');\n    noteBlock.classList.add('noteBlock');\n\n    const btnBlock = document.createElement('div');\n    btnBlock.classList.add('btnBlock');\n\n    const headingText = document.createElement('p');\n    headingText.classList.add('headingNote');\n    const notesText = document.createElement('p');\n    notesText.classList.add('notesText');\n    \n    const newHeading = heading;\n    const newText = text;\n\n    notes.appendChild(note);\n    note.appendChild(noteBlock);\n    noteBlock.appendChild(headingText);\n    noteBlock.appendChild(notesText);\n    note.appendChild(btnBlock);\n    headingText.append(newHeading);\n    notesText.append(newText);\n\n    createBtn(note, btnBlock, 'del', 'blacklighRed', (mainElem) => {   \n      deletedKey = mainElem.getAttribute('id');\n      const id = deletedKey.slice(5);\n\n      localStorage.removeItem(id);\n      mainElem.remove();\n    });\n    \n    createBtn(note, btnBlock, 'edit', 'blacklighYelow', (mainElem) => {\n      const editNote = mainElem.querySelector('.notesText');\n      const editHeading = mainElem.querySelector('.headingNote');\n      newNote.value = editNote.textContent;\n      headingNote.value = editHeading.textContent;\n\n      const btnEdit = document.getElementById('editArea');\n      btnEdit.style.display = 'block';\n      const btnAdd = document.getElementById('addArea');\n      btnAdd.style.display = 'none';\n      \n      editedNoteId = mainElem.getAttribute('id');\n      editedNoteId2 = editedNoteId.slice(5);\n      \n      getInfFromLS(editedNoteId2);\n    });\n\n    createBtn(note, btnBlock, 'ready', 'blacklighGreen', (mainElem) => {\n      if (notesText.style.backgroundColor !== 'rgb(131, 130, 133)') { \n        notesText.style.backgroundColor = 'rgb(131, 130, 133)';\n        notesText.style.textDecoration = 'line-through';\n        headingText.style.textDecoration = 'line-through';\n        noteBlock.style.backgroundColor = 'rgb(131, 130, 133)';\n\n        readyKey = mainElem.getAttribute('id');\n        const key = readyKey.slice(5);\n\n        getInfFromLS(key);\n        inf.ready = true;\n        addToJSON(inf);\n        saveInLocalStorage(key, infJSON);\n          \n        return\n      }\n      else {\n        notesText.style.backgroundColor = 'rgb(114, 126, 153)';\n        notesText.style.textDecoration = 'none';\n        headingText.style.backgroundColor = 'rgb(131, 130, 133)';\n        headingText.style.textDecoration = 'none';\n        noteBlock.style.backgroundColor = 'rgb(114, 126, 153)';\n\n        readyKey = mainElem.getAttribute('id');\n        const key = readyKey.slice(5);\n\n        getInfFromLS(key);\n        inf.ready = false;\n        addToJSON(inf);\n        saveInLocalStorage(key, infJSON);\n      }; \n\n      clear();\n\n      headingNote.focus();\n      notes.scrollTop = notes.scrollHeight;\n      const noteInJSON = addToJSON({\n        heading,\n        text,\n        ready\n      });\n\n      saveInLocalStorage(--noteId, noteInJSON);\n      createId()\n      console.log(noteInJSON)\n    });\n\n    clear();\n    headingNote.focus();\n    notes.scrollTop = notes.scrollHeight;\n\n    const noteInJSON = addToJSON({\n      heading,\n      text,\n      ready\n    });\n\n    saveInLocalStorage(--noteId, noteInJSON);\n    createId()\n  }\n\n  for (const obj of notesData) {\n    createNote(obj);\n  }\n\n  function editNote() {\n    const elem = document.getElementById(editedNoteId);\n\n    const btnEdit = document.getElementById('editArea');\n    btnEdit.style.display = 'none';\n    const btnAdd = document.getElementById('addArea');\n    btnAdd.style.display = 'block';\n\n    if (elem === null) {\n      btnEdit.style.display = 'none';\n      btnAdd.style.display = 'block';\n    } \n    else {\n      const currEditNote = elem.querySelector('.notesText');\n      currEditNote.textContent = newNote.value;\n      const currHeadingNote = elem.querySelector('.headingNote');\n      currHeadingNote.textContent = headingNote.value;\n    };\n\n    saveInLocalStorage(editedNoteId2, JSON.stringify({\n      heading: headingNote.value,\n      text: newNote.value,\n      ready: false\n    }));\n    \n    clear();\n\n    headingNote.focus();\n  }\n\n  const add = document.getElementById('addArea');\n  add.onclick = (e) => createNote();\n\n  newNote.addEventListener('keyup', function(event) {\n    if (event.key == 'Enter' && event.shiftKey) {\n    createNote();\n    }\n  });\n\n  headingNote.addEventListener('keyup', function(event) {\n    if (event.key == 'Enter' && event.shiftKey) {\n    createNote();\n    }\n  });\n\n  const edit = document.getElementById('editArea');\n  edit.onclick = editNote;\n\n  function addToJSON(obj) {\n    return infJSON = JSON.stringify(obj)\n  }\n\n  function saveInLocalStorage(id, noteInJSON) {\n    localStorage.setItem(id, noteInJSON);\n  }\n\n  function getInfFromLS(id){\n    const rawInf = localStorage.getItem(id);\n    inf = JSON.parse(rawInf);\n  } \n\n  headingNote.focus()\n}\n\n\n\ndocument.addEventListener('DOMContentLoaded', onPageLoaded);\n\n\n//# sourceURL=webpack://todo/./start/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./start/index.js"]();
/******/ 	
/******/ })()
;